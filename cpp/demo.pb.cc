// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace res {

namespace {

const ::google::protobuf::Descriptor* ComposeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComposeType__CName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposeType__CName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meta__PrimaryKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meta__PrimaryKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meta__CName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meta__CName_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_demo_2eproto() {
  protobuf_AddDesc_demo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "demo.proto");
  GOOGLE_CHECK(file != NULL);
  ComposeType_descriptor_ = file->message_type(0);
  static const int ComposeType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeType, id_),
  };
  ComposeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposeType_descriptor_,
      ComposeType::default_instance_,
      ComposeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposeType));
  ComposeType__CName_descriptor_ = ComposeType_descriptor_->nested_type(0);
  static const int ComposeType__CName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeType__CName, id_),
  };
  ComposeType__CName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposeType__CName_descriptor_,
      ComposeType__CName::default_instance_,
      ComposeType__CName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeType__CName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeType__CName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposeType__CName));
  Meta_descriptor_ = file->message_type(1);
  static const int Meta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, arrct_),
  };
  Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Meta_descriptor_,
      Meta::default_instance_,
      Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Meta));
  Meta__PrimaryKey_descriptor_ = Meta_descriptor_->nested_type(0);
  static const int Meta__PrimaryKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__PrimaryKey, id_),
  };
  Meta__PrimaryKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Meta__PrimaryKey_descriptor_,
      Meta__PrimaryKey::default_instance_,
      Meta__PrimaryKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__PrimaryKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__PrimaryKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Meta__PrimaryKey));
  Meta__CName_descriptor_ = Meta_descriptor_->nested_type(1);
  static const int Meta__CName_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__CName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__CName, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__CName, arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__CName, arrct_),
  };
  Meta__CName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Meta__CName_descriptor_,
      Meta__CName::default_instance_,
      Meta__CName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__CName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta__CName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Meta__CName));
  MetaTable_descriptor_ = file->message_type(2);
  static const int MetaTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaTable, list_),
  };
  MetaTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaTable_descriptor_,
      MetaTable::default_instance_,
      MetaTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_demo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposeType_descriptor_, &ComposeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposeType__CName_descriptor_, &ComposeType__CName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Meta_descriptor_, &Meta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Meta__PrimaryKey_descriptor_, &Meta__PrimaryKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Meta__CName_descriptor_, &Meta__CName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaTable_descriptor_, &MetaTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_demo_2eproto() {
  delete ComposeType::default_instance_;
  delete ComposeType_reflection_;
  delete ComposeType__CName::default_instance_;
  delete ComposeType__CName_reflection_;
  delete ComposeType__CName::_default_id_;
  delete Meta::default_instance_;
  delete Meta_reflection_;
  delete Meta__PrimaryKey::default_instance_;
  delete Meta__PrimaryKey_reflection_;
  delete Meta__CName::default_instance_;
  delete Meta__CName_reflection_;
  delete Meta__CName::_default_id_;
  delete Meta__CName::_default_ct_;
  delete Meta__CName::_default_arr_;
  delete Meta__CName::_default_arrct_;
  delete MetaTable::default_instance_;
  delete MetaTable_reflection_;
}

void protobuf_AddDesc_demo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndemo.proto\022\003res\"3\n\013ComposeType\022\n\n\002id\030\001"
    " \002(\005\032\030\n\006_CName\022\016\n\002id\030\001 \001(\t:\002ID\"\331\001\n\004Meta\022"
    "\n\n\002id\030\001 \002(\005\022\034\n\002ct\030\002 \001(\0132\020.res.ComposeTyp"
    "e\022\013\n\003arr\030\003 \003(\005\022\037\n\005arrct\030\004 \003(\0132\020.res.Comp"
    "oseType\032\031\n\013_PrimaryKey\022\n\n\002id\030\001 \001(\005\032^\n\006_C"
    "Name\022\016\n\002id\030\001 \001(\t:\002ID\022\022\n\002ct\030\002 \001(\t:\006\345\244\215\345\220\210"
    "\022\023\n\003arr\030\003 \001(\t:\006\346\225\260\347\273\204\022\033\n\005arrct\030\004 \001(\t:\014\345\244"
    "\215\345\220\210\346\225\260\347\273\204\"$\n\tMetaTable\022\027\n\004list\030\001 \003(\0132\t."
    "res.Meta", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
  ComposeType::default_instance_ = new ComposeType();
  ComposeType__CName::_default_id_ =
      new ::std::string("ID", 2);
  ComposeType__CName::default_instance_ = new ComposeType__CName();
  Meta::default_instance_ = new Meta();
  Meta__PrimaryKey::default_instance_ = new Meta__PrimaryKey();
  Meta__CName::_default_id_ =
      new ::std::string("ID", 2);
  Meta__CName::_default_ct_ =
      new ::std::string("\345\244\215\345\220\210", 6);
  Meta__CName::_default_arr_ =
      new ::std::string("\346\225\260\347\273\204", 6);
  Meta__CName::_default_arrct_ =
      new ::std::string("\345\244\215\345\220\210\346\225\260\347\273\204", 12);
  Meta__CName::default_instance_ = new Meta__CName();
  MetaTable::default_instance_ = new MetaTable();
  ComposeType::default_instance_->InitAsDefaultInstance();
  ComposeType__CName::default_instance_->InitAsDefaultInstance();
  Meta::default_instance_->InitAsDefaultInstance();
  Meta__PrimaryKey::default_instance_->InitAsDefaultInstance();
  Meta__CName::default_instance_->InitAsDefaultInstance();
  MetaTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_demo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_demo_2eproto {
  StaticDescriptorInitializer_demo_2eproto() {
    protobuf_AddDesc_demo_2eproto();
  }
} static_descriptor_initializer_demo_2eproto_;

// ===================================================================

::std::string* ComposeType__CName::_default_id_ = NULL;
#ifndef _MSC_VER
const int ComposeType__CName::kIdFieldNumber;
#endif  // !_MSC_VER

ComposeType__CName::ComposeType__CName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:res.ComposeType._CName)
}

void ComposeType__CName::InitAsDefaultInstance() {
}

ComposeType__CName::ComposeType__CName(const ComposeType__CName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:res.ComposeType._CName)
}

void ComposeType__CName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposeType__CName::~ComposeType__CName() {
  // @@protoc_insertion_point(destructor:res.ComposeType._CName)
  SharedDtor();
}

void ComposeType__CName::SharedDtor() {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ComposeType__CName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposeType__CName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposeType__CName_descriptor_;
}

const ComposeType__CName& ComposeType__CName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

ComposeType__CName* ComposeType__CName::default_instance_ = NULL;

ComposeType__CName* ComposeType__CName::New() const {
  return new ComposeType__CName;
}

void ComposeType__CName::Clear() {
  if (has_id()) {
    if (id_ != _default_id_) {
      id_->assign(*_default_id_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposeType__CName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:res.ComposeType._CName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1 [default = "ID"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:res.ComposeType._CName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:res.ComposeType._CName)
  return false;
#undef DO_
}

void ComposeType__CName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:res.ComposeType._CName)
  // optional string id = 1 [default = "ID"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:res.ComposeType._CName)
}

::google::protobuf::uint8* ComposeType__CName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:res.ComposeType._CName)
  // optional string id = 1 [default = "ID"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:res.ComposeType._CName)
  return target;
}

int ComposeType__CName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1 [default = "ID"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposeType__CName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposeType__CName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposeType__CName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposeType__CName::MergeFrom(const ComposeType__CName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposeType__CName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposeType__CName::CopyFrom(const ComposeType__CName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposeType__CName::IsInitialized() const {

  return true;
}

void ComposeType__CName::Swap(ComposeType__CName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposeType__CName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposeType__CName_descriptor_;
  metadata.reflection = ComposeType__CName_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComposeType::kIdFieldNumber;
#endif  // !_MSC_VER

ComposeType::ComposeType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:res.ComposeType)
}

void ComposeType::InitAsDefaultInstance() {
}

ComposeType::ComposeType(const ComposeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:res.ComposeType)
}

void ComposeType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposeType::~ComposeType() {
  // @@protoc_insertion_point(destructor:res.ComposeType)
  SharedDtor();
}

void ComposeType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComposeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposeType_descriptor_;
}

const ComposeType& ComposeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

ComposeType* ComposeType::default_instance_ = NULL;

ComposeType* ComposeType::New() const {
  return new ComposeType;
}

void ComposeType::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:res.ComposeType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:res.ComposeType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:res.ComposeType)
  return false;
#undef DO_
}

void ComposeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:res.ComposeType)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:res.ComposeType)
}

::google::protobuf::uint8* ComposeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:res.ComposeType)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:res.ComposeType)
  return target;
}

int ComposeType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposeType::MergeFrom(const ComposeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposeType::CopyFrom(const ComposeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposeType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ComposeType::Swap(ComposeType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposeType_descriptor_;
  metadata.reflection = ComposeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Meta__PrimaryKey::kIdFieldNumber;
#endif  // !_MSC_VER

Meta__PrimaryKey::Meta__PrimaryKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:res.Meta._PrimaryKey)
}

void Meta__PrimaryKey::InitAsDefaultInstance() {
}

Meta__PrimaryKey::Meta__PrimaryKey(const Meta__PrimaryKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:res.Meta._PrimaryKey)
}

void Meta__PrimaryKey::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Meta__PrimaryKey::~Meta__PrimaryKey() {
  // @@protoc_insertion_point(destructor:res.Meta._PrimaryKey)
  SharedDtor();
}

void Meta__PrimaryKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Meta__PrimaryKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meta__PrimaryKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meta__PrimaryKey_descriptor_;
}

const Meta__PrimaryKey& Meta__PrimaryKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

Meta__PrimaryKey* Meta__PrimaryKey::default_instance_ = NULL;

Meta__PrimaryKey* Meta__PrimaryKey::New() const {
  return new Meta__PrimaryKey;
}

void Meta__PrimaryKey::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Meta__PrimaryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:res.Meta._PrimaryKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:res.Meta._PrimaryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:res.Meta._PrimaryKey)
  return false;
#undef DO_
}

void Meta__PrimaryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:res.Meta._PrimaryKey)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:res.Meta._PrimaryKey)
}

::google::protobuf::uint8* Meta__PrimaryKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:res.Meta._PrimaryKey)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:res.Meta._PrimaryKey)
  return target;
}

int Meta__PrimaryKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meta__PrimaryKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Meta__PrimaryKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Meta__PrimaryKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Meta__PrimaryKey::MergeFrom(const Meta__PrimaryKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Meta__PrimaryKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta__PrimaryKey::CopyFrom(const Meta__PrimaryKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta__PrimaryKey::IsInitialized() const {

  return true;
}

void Meta__PrimaryKey::Swap(Meta__PrimaryKey* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Meta__PrimaryKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meta__PrimaryKey_descriptor_;
  metadata.reflection = Meta__PrimaryKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Meta__CName::_default_id_ = NULL;
::std::string* Meta__CName::_default_ct_ = NULL;
::std::string* Meta__CName::_default_arr_ = NULL;
::std::string* Meta__CName::_default_arrct_ = NULL;
#ifndef _MSC_VER
const int Meta__CName::kIdFieldNumber;
const int Meta__CName::kCtFieldNumber;
const int Meta__CName::kArrFieldNumber;
const int Meta__CName::kArrctFieldNumber;
#endif  // !_MSC_VER

Meta__CName::Meta__CName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:res.Meta._CName)
}

void Meta__CName::InitAsDefaultInstance() {
}

Meta__CName::Meta__CName(const Meta__CName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:res.Meta._CName)
}

void Meta__CName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(_default_id_);
  ct_ = const_cast< ::std::string*>(_default_ct_);
  arr_ = const_cast< ::std::string*>(_default_arr_);
  arrct_ = const_cast< ::std::string*>(_default_arrct_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Meta__CName::~Meta__CName() {
  // @@protoc_insertion_point(destructor:res.Meta._CName)
  SharedDtor();
}

void Meta__CName::SharedDtor() {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (ct_ != _default_ct_) {
    delete ct_;
  }
  if (arr_ != _default_arr_) {
    delete arr_;
  }
  if (arrct_ != _default_arrct_) {
    delete arrct_;
  }
  if (this != default_instance_) {
  }
}

void Meta__CName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meta__CName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meta__CName_descriptor_;
}

const Meta__CName& Meta__CName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

Meta__CName* Meta__CName::default_instance_ = NULL;

Meta__CName* Meta__CName::New() const {
  return new Meta__CName;
}

void Meta__CName::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != _default_id_) {
        id_->assign(*_default_id_);
      }
    }
    if (has_ct()) {
      if (ct_ != _default_ct_) {
        ct_->assign(*_default_ct_);
      }
    }
    if (has_arr()) {
      if (arr_ != _default_arr_) {
        arr_->assign(*_default_arr_);
      }
    }
    if (has_arrct()) {
      if (arrct_ != _default_arrct_) {
        arrct_->assign(*_default_arrct_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Meta__CName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:res.Meta._CName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1 [default = "ID"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ct;
        break;
      }

      // optional string ct = 2 [default = "\345\244\215\345\220\210"];
      case 2: {
        if (tag == 18) {
         parse_ct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ct().data(), this->ct().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ct");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arr;
        break;
      }

      // optional string arr = 3 [default = "\346\225\260\347\273\204"];
      case 3: {
        if (tag == 26) {
         parse_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arr().data(), this->arr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arrct;
        break;
      }

      // optional string arrct = 4 [default = "\345\244\215\345\220\210\346\225\260\347\273\204"];
      case 4: {
        if (tag == 34) {
         parse_arrct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arrct().data(), this->arrct().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arrct");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:res.Meta._CName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:res.Meta._CName)
  return false;
#undef DO_
}

void Meta__CName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:res.Meta._CName)
  // optional string id = 1 [default = "ID"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string ct = 2 [default = "\345\244\215\345\220\210"];
  if (has_ct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ct().data(), this->ct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ct");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ct(), output);
  }

  // optional string arr = 3 [default = "\346\225\260\347\273\204"];
  if (has_arr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arr().data(), this->arr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->arr(), output);
  }

  // optional string arrct = 4 [default = "\345\244\215\345\220\210\346\225\260\347\273\204"];
  if (has_arrct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrct().data(), this->arrct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrct");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->arrct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:res.Meta._CName)
}

::google::protobuf::uint8* Meta__CName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:res.Meta._CName)
  // optional string id = 1 [default = "ID"];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string ct = 2 [default = "\345\244\215\345\220\210"];
  if (has_ct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ct().data(), this->ct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ct");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ct(), target);
  }

  // optional string arr = 3 [default = "\346\225\260\347\273\204"];
  if (has_arr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arr().data(), this->arr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->arr(), target);
  }

  // optional string arrct = 4 [default = "\345\244\215\345\220\210\346\225\260\347\273\204"];
  if (has_arrct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrct().data(), this->arrct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrct");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arrct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:res.Meta._CName)
  return target;
}

int Meta__CName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1 [default = "ID"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string ct = 2 [default = "\345\244\215\345\220\210"];
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ct());
    }

    // optional string arr = 3 [default = "\346\225\260\347\273\204"];
    if (has_arr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arr());
    }

    // optional string arrct = 4 [default = "\345\244\215\345\220\210\346\225\260\347\273\204"];
    if (has_arrct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meta__CName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Meta__CName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Meta__CName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Meta__CName::MergeFrom(const Meta__CName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ct()) {
      set_ct(from.ct());
    }
    if (from.has_arr()) {
      set_arr(from.arr());
    }
    if (from.has_arrct()) {
      set_arrct(from.arrct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Meta__CName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta__CName::CopyFrom(const Meta__CName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta__CName::IsInitialized() const {

  return true;
}

void Meta__CName::Swap(Meta__CName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ct_, other->ct_);
    std::swap(arr_, other->arr_);
    std::swap(arrct_, other->arrct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Meta__CName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meta__CName_descriptor_;
  metadata.reflection = Meta__CName_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Meta::kIdFieldNumber;
const int Meta::kCtFieldNumber;
const int Meta::kArrFieldNumber;
const int Meta::kArrctFieldNumber;
#endif  // !_MSC_VER

Meta::Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:res.Meta)
}

void Meta::InitAsDefaultInstance() {
  ct_ = const_cast< ::res::ComposeType*>(&::res::ComposeType::default_instance());
}

Meta::Meta(const Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:res.Meta)
}

void Meta::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:res.Meta)
  SharedDtor();
}

void Meta::SharedDtor() {
  if (this != default_instance_) {
    delete ct_;
  }
}

void Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meta_descriptor_;
}

const Meta& Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

Meta* Meta::default_instance_ = NULL;

Meta* Meta::New() const {
  return new Meta;
}

void Meta::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_ct()) {
      if (ct_ != NULL) ct_->::res::ComposeType::Clear();
    }
  }
  arr_.Clear();
  arrct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:res.Meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ct;
        break;
      }

      // optional .res.ComposeType ct = 2;
      case 2: {
        if (tag == 18) {
         parse_ct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arr;
        break;
      }

      // repeated int32 arr = 3;
      case 3: {
        if (tag == 24) {
         parse_arr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_arr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arr;
        if (input->ExpectTag(34)) goto parse_arrct;
        break;
      }

      // repeated .res.ComposeType arrct = 4;
      case 4: {
        if (tag == 34) {
         parse_arrct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arrct;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:res.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:res.Meta)
  return false;
#undef DO_
}

void Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:res.Meta)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .res.ComposeType ct = 2;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(), output);
  }

  // repeated int32 arr = 3;
  for (int i = 0; i < this->arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->arr(i), output);
  }

  // repeated .res.ComposeType arrct = 4;
  for (int i = 0; i < this->arrct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:res.Meta)
}

::google::protobuf::uint8* Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:res.Meta)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .res.ComposeType ct = 2;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(), target);
  }

  // repeated int32 arr = 3;
  for (int i = 0; i < this->arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->arr(i), target);
  }

  // repeated .res.ComposeType arrct = 4;
  for (int i = 0; i < this->arrct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:res.Meta)
  return target;
}

int Meta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .res.ComposeType ct = 2;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ct());
    }

  }
  // repeated int32 arr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->arr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arr(i));
    }
    total_size += 1 * this->arr_size() + data_size;
  }

  // repeated .res.ComposeType arrct = 4;
  total_size += 1 * this->arrct_size();
  for (int i = 0; i < this->arrct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Meta::MergeFrom(const Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  arr_.MergeFrom(from.arr_);
  arrct_.MergeFrom(from.arrct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ct()) {
      mutable_ct()->::res::ComposeType::MergeFrom(from.ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta::CopyFrom(const Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ct()) {
    if (!this->ct().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->arrct())) return false;
  return true;
}

void Meta::Swap(Meta* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ct_, other->ct_);
    arr_.Swap(&other->arr_);
    arrct_.Swap(&other->arrct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meta_descriptor_;
  metadata.reflection = Meta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaTable::kListFieldNumber;
#endif  // !_MSC_VER

MetaTable::MetaTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:res.MetaTable)
}

void MetaTable::InitAsDefaultInstance() {
}

MetaTable::MetaTable(const MetaTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:res.MetaTable)
}

void MetaTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaTable::~MetaTable() {
  // @@protoc_insertion_point(destructor:res.MetaTable)
  SharedDtor();
}

void MetaTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetaTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaTable_descriptor_;
}

const MetaTable& MetaTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

MetaTable* MetaTable::default_instance_ = NULL;

MetaTable* MetaTable::New() const {
  return new MetaTable;
}

void MetaTable::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:res.MetaTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .res.Meta list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:res.MetaTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:res.MetaTable)
  return false;
#undef DO_
}

void MetaTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:res.MetaTable)
  // repeated .res.Meta list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:res.MetaTable)
}

::google::protobuf::uint8* MetaTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:res.MetaTable)
  // repeated .res.Meta list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:res.MetaTable)
  return target;
}

int MetaTable::ByteSize() const {
  int total_size = 0;

  // repeated .res.Meta list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaTable::MergeFrom(const MetaTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaTable::CopyFrom(const MetaTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaTable::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void MetaTable::Swap(MetaTable* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaTable_descriptor_;
  metadata.reflection = MetaTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace res

// @@protoc_insertion_point(global_scope)
