// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef PROTOBUF_demo_2eproto__INCLUDED
#define PROTOBUF_demo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace res {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_demo_2eproto();
void protobuf_AssignDesc_demo_2eproto();
void protobuf_ShutdownFile_demo_2eproto();

class ComposeType;
class ComposeType__CName;
class Meta;
class Meta__PrimaryKey;
class Meta__CName;
class MetaTable;

// ===================================================================

class ComposeType__CName : public ::google::protobuf::Message {
 public:
  ComposeType__CName();
  virtual ~ComposeType__CName();

  ComposeType__CName(const ComposeType__CName& from);

  inline ComposeType__CName& operator=(const ComposeType__CName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComposeType__CName& default_instance();

  void Swap(ComposeType__CName* other);

  // implements Message ----------------------------------------------

  ComposeType__CName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComposeType__CName& from);
  void MergeFrom(const ComposeType__CName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1 [default = "ID"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:res.ComposeType._CName)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static ComposeType__CName* default_instance_;
};
// -------------------------------------------------------------------

class ComposeType : public ::google::protobuf::Message {
 public:
  ComposeType();
  virtual ~ComposeType();

  ComposeType(const ComposeType& from);

  inline ComposeType& operator=(const ComposeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComposeType& default_instance();

  void Swap(ComposeType* other);

  // implements Message ----------------------------------------------

  ComposeType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComposeType& from);
  void MergeFrom(const ComposeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComposeType__CName _CName;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:res.ComposeType)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static ComposeType* default_instance_;
};
// -------------------------------------------------------------------

class Meta__PrimaryKey : public ::google::protobuf::Message {
 public:
  Meta__PrimaryKey();
  virtual ~Meta__PrimaryKey();

  Meta__PrimaryKey(const Meta__PrimaryKey& from);

  inline Meta__PrimaryKey& operator=(const Meta__PrimaryKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta__PrimaryKey& default_instance();

  void Swap(Meta__PrimaryKey* other);

  // implements Message ----------------------------------------------

  Meta__PrimaryKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta__PrimaryKey& from);
  void MergeFrom(const Meta__PrimaryKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:res.Meta._PrimaryKey)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static Meta__PrimaryKey* default_instance_;
};
// -------------------------------------------------------------------

class Meta__CName : public ::google::protobuf::Message {
 public:
  Meta__CName();
  virtual ~Meta__CName();

  Meta__CName(const Meta__CName& from);

  inline Meta__CName& operator=(const Meta__CName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta__CName& default_instance();

  void Swap(Meta__CName* other);

  // implements Message ----------------------------------------------

  Meta__CName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta__CName& from);
  void MergeFrom(const Meta__CName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1 [default = "ID"];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string ct = 2 [default = "\345\244\215\345\220\210"];
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCtFieldNumber = 2;
  inline const ::std::string& ct() const;
  inline void set_ct(const ::std::string& value);
  inline void set_ct(const char* value);
  inline void set_ct(const char* value, size_t size);
  inline ::std::string* mutable_ct();
  inline ::std::string* release_ct();
  inline void set_allocated_ct(::std::string* ct);

  // optional string arr = 3 [default = "\346\225\260\347\273\204"];
  inline bool has_arr() const;
  inline void clear_arr();
  static const int kArrFieldNumber = 3;
  inline const ::std::string& arr() const;
  inline void set_arr(const ::std::string& value);
  inline void set_arr(const char* value);
  inline void set_arr(const char* value, size_t size);
  inline ::std::string* mutable_arr();
  inline ::std::string* release_arr();
  inline void set_allocated_arr(::std::string* arr);

  // optional string arrct = 4 [default = "\345\244\215\345\220\210\346\225\260\347\273\204"];
  inline bool has_arrct() const;
  inline void clear_arrct();
  static const int kArrctFieldNumber = 4;
  inline const ::std::string& arrct() const;
  inline void set_arrct(const ::std::string& value);
  inline void set_arrct(const char* value);
  inline void set_arrct(const char* value, size_t size);
  inline ::std::string* mutable_arrct();
  inline ::std::string* release_arrct();
  inline void set_allocated_arrct(::std::string* arrct);

  // @@protoc_insertion_point(class_scope:res.Meta._CName)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ct();
  inline void clear_has_ct();
  inline void set_has_arr();
  inline void clear_has_arr();
  inline void set_has_arrct();
  inline void clear_has_arrct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_id_;
  ::std::string* id_;
  static ::std::string* _default_ct_;
  ::std::string* ct_;
  static ::std::string* _default_arr_;
  ::std::string* arr_;
  static ::std::string* _default_arrct_;
  ::std::string* arrct_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static Meta__CName* default_instance_;
};
// -------------------------------------------------------------------

class Meta : public ::google::protobuf::Message {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  void Swap(Meta* other);

  // implements Message ----------------------------------------------

  Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Meta__PrimaryKey _PrimaryKey;
  typedef Meta__CName _CName;

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .res.ComposeType ct = 2;
  inline bool has_ct() const;
  inline void clear_ct();
  static const int kCtFieldNumber = 2;
  inline const ::res::ComposeType& ct() const;
  inline ::res::ComposeType* mutable_ct();
  inline ::res::ComposeType* release_ct();
  inline void set_allocated_ct(::res::ComposeType* ct);

  // repeated int32 arr = 3;
  inline int arr_size() const;
  inline void clear_arr();
  static const int kArrFieldNumber = 3;
  inline ::google::protobuf::int32 arr(int index) const;
  inline void set_arr(int index, ::google::protobuf::int32 value);
  inline void add_arr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr();

  // repeated .res.ComposeType arrct = 4;
  inline int arrct_size() const;
  inline void clear_arrct();
  static const int kArrctFieldNumber = 4;
  inline const ::res::ComposeType& arrct(int index) const;
  inline ::res::ComposeType* mutable_arrct(int index);
  inline ::res::ComposeType* add_arrct();
  inline const ::google::protobuf::RepeatedPtrField< ::res::ComposeType >&
      arrct() const;
  inline ::google::protobuf::RepeatedPtrField< ::res::ComposeType >*
      mutable_arrct();

  // @@protoc_insertion_point(class_scope:res.Meta)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ct();
  inline void clear_has_ct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::res::ComposeType* ct_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_;
  ::google::protobuf::RepeatedPtrField< ::res::ComposeType > arrct_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static Meta* default_instance_;
};
// -------------------------------------------------------------------

class MetaTable : public ::google::protobuf::Message {
 public:
  MetaTable();
  virtual ~MetaTable();

  MetaTable(const MetaTable& from);

  inline MetaTable& operator=(const MetaTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaTable& default_instance();

  void Swap(MetaTable* other);

  // implements Message ----------------------------------------------

  MetaTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaTable& from);
  void MergeFrom(const MetaTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .res.Meta list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::res::Meta& list(int index) const;
  inline ::res::Meta* mutable_list(int index);
  inline ::res::Meta* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::res::Meta >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::res::Meta >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:res.MetaTable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::res::Meta > list_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static MetaTable* default_instance_;
};
// ===================================================================


// ===================================================================

// ComposeType__CName

// optional string id = 1 [default = "ID"];
inline bool ComposeType__CName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComposeType__CName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComposeType__CName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComposeType__CName::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& ComposeType__CName::id() const {
  // @@protoc_insertion_point(field_get:res.ComposeType._CName.id)
  return *id_;
}
inline void ComposeType__CName::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:res.ComposeType._CName.id)
}
inline void ComposeType__CName::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:res.ComposeType._CName.id)
}
inline void ComposeType__CName::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:res.ComposeType._CName.id)
}
inline ::std::string* ComposeType__CName::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:res.ComposeType._CName.id)
  return id_;
}
inline ::std::string* ComposeType__CName::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void ComposeType__CName::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:res.ComposeType._CName.id)
}

// -------------------------------------------------------------------

// ComposeType

// required int32 id = 1;
inline bool ComposeType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComposeType::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComposeType::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComposeType::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ComposeType::id() const {
  // @@protoc_insertion_point(field_get:res.ComposeType.id)
  return id_;
}
inline void ComposeType::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:res.ComposeType.id)
}

// -------------------------------------------------------------------

// Meta__PrimaryKey

// optional uint32 id = 1;
inline bool Meta__PrimaryKey::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta__PrimaryKey::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta__PrimaryKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta__PrimaryKey::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Meta__PrimaryKey::id() const {
  // @@protoc_insertion_point(field_get:res.Meta._PrimaryKey.id)
  return id_;
}
inline void Meta__PrimaryKey::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:res.Meta._PrimaryKey.id)
}

// -------------------------------------------------------------------

// Meta__CName

// optional string id = 1 [default = "ID"];
inline bool Meta__CName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta__CName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta__CName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta__CName::clear_id() {
  if (id_ != _default_id_) {
    id_->assign(*_default_id_);
  }
  clear_has_id();
}
inline const ::std::string& Meta__CName::id() const {
  // @@protoc_insertion_point(field_get:res.Meta._CName.id)
  return *id_;
}
inline void Meta__CName::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:res.Meta._CName.id)
}
inline void Meta__CName::set_id(const char* value) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:res.Meta._CName.id)
}
inline void Meta__CName::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:res.Meta._CName.id)
}
inline ::std::string* Meta__CName::mutable_id() {
  set_has_id();
  if (id_ == _default_id_) {
    id_ = new ::std::string(*_default_id_);
  }
  // @@protoc_insertion_point(field_mutable:res.Meta._CName.id)
  return id_;
}
inline ::std::string* Meta__CName::release_id() {
  clear_has_id();
  if (id_ == _default_id_) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(_default_id_);
    return temp;
  }
}
inline void Meta__CName::set_allocated_id(::std::string* id) {
  if (id_ != _default_id_) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(_default_id_);
  }
  // @@protoc_insertion_point(field_set_allocated:res.Meta._CName.id)
}

// optional string ct = 2 [default = "\345\244\215\345\220\210"];
inline bool Meta__CName::has_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta__CName::set_has_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta__CName::clear_has_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta__CName::clear_ct() {
  if (ct_ != _default_ct_) {
    ct_->assign(*_default_ct_);
  }
  clear_has_ct();
}
inline const ::std::string& Meta__CName::ct() const {
  // @@protoc_insertion_point(field_get:res.Meta._CName.ct)
  return *ct_;
}
inline void Meta__CName::set_ct(const ::std::string& value) {
  set_has_ct();
  if (ct_ == _default_ct_) {
    ct_ = new ::std::string;
  }
  ct_->assign(value);
  // @@protoc_insertion_point(field_set:res.Meta._CName.ct)
}
inline void Meta__CName::set_ct(const char* value) {
  set_has_ct();
  if (ct_ == _default_ct_) {
    ct_ = new ::std::string;
  }
  ct_->assign(value);
  // @@protoc_insertion_point(field_set_char:res.Meta._CName.ct)
}
inline void Meta__CName::set_ct(const char* value, size_t size) {
  set_has_ct();
  if (ct_ == _default_ct_) {
    ct_ = new ::std::string;
  }
  ct_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:res.Meta._CName.ct)
}
inline ::std::string* Meta__CName::mutable_ct() {
  set_has_ct();
  if (ct_ == _default_ct_) {
    ct_ = new ::std::string(*_default_ct_);
  }
  // @@protoc_insertion_point(field_mutable:res.Meta._CName.ct)
  return ct_;
}
inline ::std::string* Meta__CName::release_ct() {
  clear_has_ct();
  if (ct_ == _default_ct_) {
    return NULL;
  } else {
    ::std::string* temp = ct_;
    ct_ = const_cast< ::std::string*>(_default_ct_);
    return temp;
  }
}
inline void Meta__CName::set_allocated_ct(::std::string* ct) {
  if (ct_ != _default_ct_) {
    delete ct_;
  }
  if (ct) {
    set_has_ct();
    ct_ = ct;
  } else {
    clear_has_ct();
    ct_ = const_cast< ::std::string*>(_default_ct_);
  }
  // @@protoc_insertion_point(field_set_allocated:res.Meta._CName.ct)
}

// optional string arr = 3 [default = "\346\225\260\347\273\204"];
inline bool Meta__CName::has_arr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Meta__CName::set_has_arr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Meta__CName::clear_has_arr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Meta__CName::clear_arr() {
  if (arr_ != _default_arr_) {
    arr_->assign(*_default_arr_);
  }
  clear_has_arr();
}
inline const ::std::string& Meta__CName::arr() const {
  // @@protoc_insertion_point(field_get:res.Meta._CName.arr)
  return *arr_;
}
inline void Meta__CName::set_arr(const ::std::string& value) {
  set_has_arr();
  if (arr_ == _default_arr_) {
    arr_ = new ::std::string;
  }
  arr_->assign(value);
  // @@protoc_insertion_point(field_set:res.Meta._CName.arr)
}
inline void Meta__CName::set_arr(const char* value) {
  set_has_arr();
  if (arr_ == _default_arr_) {
    arr_ = new ::std::string;
  }
  arr_->assign(value);
  // @@protoc_insertion_point(field_set_char:res.Meta._CName.arr)
}
inline void Meta__CName::set_arr(const char* value, size_t size) {
  set_has_arr();
  if (arr_ == _default_arr_) {
    arr_ = new ::std::string;
  }
  arr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:res.Meta._CName.arr)
}
inline ::std::string* Meta__CName::mutable_arr() {
  set_has_arr();
  if (arr_ == _default_arr_) {
    arr_ = new ::std::string(*_default_arr_);
  }
  // @@protoc_insertion_point(field_mutable:res.Meta._CName.arr)
  return arr_;
}
inline ::std::string* Meta__CName::release_arr() {
  clear_has_arr();
  if (arr_ == _default_arr_) {
    return NULL;
  } else {
    ::std::string* temp = arr_;
    arr_ = const_cast< ::std::string*>(_default_arr_);
    return temp;
  }
}
inline void Meta__CName::set_allocated_arr(::std::string* arr) {
  if (arr_ != _default_arr_) {
    delete arr_;
  }
  if (arr) {
    set_has_arr();
    arr_ = arr;
  } else {
    clear_has_arr();
    arr_ = const_cast< ::std::string*>(_default_arr_);
  }
  // @@protoc_insertion_point(field_set_allocated:res.Meta._CName.arr)
}

// optional string arrct = 4 [default = "\345\244\215\345\220\210\346\225\260\347\273\204"];
inline bool Meta__CName::has_arrct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Meta__CName::set_has_arrct() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Meta__CName::clear_has_arrct() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Meta__CName::clear_arrct() {
  if (arrct_ != _default_arrct_) {
    arrct_->assign(*_default_arrct_);
  }
  clear_has_arrct();
}
inline const ::std::string& Meta__CName::arrct() const {
  // @@protoc_insertion_point(field_get:res.Meta._CName.arrct)
  return *arrct_;
}
inline void Meta__CName::set_arrct(const ::std::string& value) {
  set_has_arrct();
  if (arrct_ == _default_arrct_) {
    arrct_ = new ::std::string;
  }
  arrct_->assign(value);
  // @@protoc_insertion_point(field_set:res.Meta._CName.arrct)
}
inline void Meta__CName::set_arrct(const char* value) {
  set_has_arrct();
  if (arrct_ == _default_arrct_) {
    arrct_ = new ::std::string;
  }
  arrct_->assign(value);
  // @@protoc_insertion_point(field_set_char:res.Meta._CName.arrct)
}
inline void Meta__CName::set_arrct(const char* value, size_t size) {
  set_has_arrct();
  if (arrct_ == _default_arrct_) {
    arrct_ = new ::std::string;
  }
  arrct_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:res.Meta._CName.arrct)
}
inline ::std::string* Meta__CName::mutable_arrct() {
  set_has_arrct();
  if (arrct_ == _default_arrct_) {
    arrct_ = new ::std::string(*_default_arrct_);
  }
  // @@protoc_insertion_point(field_mutable:res.Meta._CName.arrct)
  return arrct_;
}
inline ::std::string* Meta__CName::release_arrct() {
  clear_has_arrct();
  if (arrct_ == _default_arrct_) {
    return NULL;
  } else {
    ::std::string* temp = arrct_;
    arrct_ = const_cast< ::std::string*>(_default_arrct_);
    return temp;
  }
}
inline void Meta__CName::set_allocated_arrct(::std::string* arrct) {
  if (arrct_ != _default_arrct_) {
    delete arrct_;
  }
  if (arrct) {
    set_has_arrct();
    arrct_ = arrct;
  } else {
    clear_has_arrct();
    arrct_ = const_cast< ::std::string*>(_default_arrct_);
  }
  // @@protoc_insertion_point(field_set_allocated:res.Meta._CName.arrct)
}

// -------------------------------------------------------------------

// Meta

// required uint32 id = 1;
inline bool Meta::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Meta::id() const {
  // @@protoc_insertion_point(field_get:res.Meta.id)
  return id_;
}
inline void Meta::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:res.Meta.id)
}

// optional .res.ComposeType ct = 2;
inline bool Meta::has_ct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta::set_has_ct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta::clear_has_ct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta::clear_ct() {
  if (ct_ != NULL) ct_->::res::ComposeType::Clear();
  clear_has_ct();
}
inline const ::res::ComposeType& Meta::ct() const {
  // @@protoc_insertion_point(field_get:res.Meta.ct)
  return ct_ != NULL ? *ct_ : *default_instance_->ct_;
}
inline ::res::ComposeType* Meta::mutable_ct() {
  set_has_ct();
  if (ct_ == NULL) ct_ = new ::res::ComposeType;
  // @@protoc_insertion_point(field_mutable:res.Meta.ct)
  return ct_;
}
inline ::res::ComposeType* Meta::release_ct() {
  clear_has_ct();
  ::res::ComposeType* temp = ct_;
  ct_ = NULL;
  return temp;
}
inline void Meta::set_allocated_ct(::res::ComposeType* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    set_has_ct();
  } else {
    clear_has_ct();
  }
  // @@protoc_insertion_point(field_set_allocated:res.Meta.ct)
}

// repeated int32 arr = 3;
inline int Meta::arr_size() const {
  return arr_.size();
}
inline void Meta::clear_arr() {
  arr_.Clear();
}
inline ::google::protobuf::int32 Meta::arr(int index) const {
  // @@protoc_insertion_point(field_get:res.Meta.arr)
  return arr_.Get(index);
}
inline void Meta::set_arr(int index, ::google::protobuf::int32 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:res.Meta.arr)
}
inline void Meta::add_arr(::google::protobuf::int32 value) {
  arr_.Add(value);
  // @@protoc_insertion_point(field_add:res.Meta.arr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Meta::arr() const {
  // @@protoc_insertion_point(field_list:res.Meta.arr)
  return arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Meta::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:res.Meta.arr)
  return &arr_;
}

// repeated .res.ComposeType arrct = 4;
inline int Meta::arrct_size() const {
  return arrct_.size();
}
inline void Meta::clear_arrct() {
  arrct_.Clear();
}
inline const ::res::ComposeType& Meta::arrct(int index) const {
  // @@protoc_insertion_point(field_get:res.Meta.arrct)
  return arrct_.Get(index);
}
inline ::res::ComposeType* Meta::mutable_arrct(int index) {
  // @@protoc_insertion_point(field_mutable:res.Meta.arrct)
  return arrct_.Mutable(index);
}
inline ::res::ComposeType* Meta::add_arrct() {
  // @@protoc_insertion_point(field_add:res.Meta.arrct)
  return arrct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::res::ComposeType >&
Meta::arrct() const {
  // @@protoc_insertion_point(field_list:res.Meta.arrct)
  return arrct_;
}
inline ::google::protobuf::RepeatedPtrField< ::res::ComposeType >*
Meta::mutable_arrct() {
  // @@protoc_insertion_point(field_mutable_list:res.Meta.arrct)
  return &arrct_;
}

// -------------------------------------------------------------------

// MetaTable

// repeated .res.Meta list = 1;
inline int MetaTable::list_size() const {
  return list_.size();
}
inline void MetaTable::clear_list() {
  list_.Clear();
}
inline const ::res::Meta& MetaTable::list(int index) const {
  // @@protoc_insertion_point(field_get:res.MetaTable.list)
  return list_.Get(index);
}
inline ::res::Meta* MetaTable::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:res.MetaTable.list)
  return list_.Mutable(index);
}
inline ::res::Meta* MetaTable::add_list() {
  // @@protoc_insertion_point(field_add:res.MetaTable.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::res::Meta >&
MetaTable::list() const {
  // @@protoc_insertion_point(field_list:res.MetaTable.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::res::Meta >*
MetaTable::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:res.MetaTable.list)
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace res

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_demo_2eproto__INCLUDED
